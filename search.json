[{"title":"python学习","url":"/python%E5%AD%A6%E4%B9%A0/","content":"基础知识变量字符串：用引号括起来的字符串，引号可以是单引号也可以是双引号大小写转换\nname = &quot; Ada Love &quot;print(name.upper())print(name.lower()）\n\n合并字符串\nfirst_name = &quot;tom&quot;last_name = &quot;haha&quot;full_name = first_name + &quot; &quot; +last_name\n\n使用制表符或换行符来添加空白\\t制表符，添加一个tab\\n换行\n删除空白使用rstrip()函数删除结尾空白lstrip()函数剔除开头的空白strip()函数删除两端的空白\nstr = &#x27;python &#x27;str = str.rstrip()\n\n单引号和撇号同时使用，编译器将无法正确识别\n数字python使用两个乘号表示乘方运算\n3 ** 3 #=27\n\npython将带小数点的数字都称为浮点数\nstr()函数告诉编译器是字符串\nage = 22message = &quot;Happy&quot; + str(age) + &quot;rd Birthday&quot;print(message)# 如果不适用str()函数Python无法识别age\n\n列表简介什么是列表列表是由一系列按特定顺序排列的元素组成用方括号[]来表示列号，并用逗号来分隔其中的元素\nlist = [&#x27;tom&#x27;,&#x27;jam&#x27;,&#x27;haha&#x27;]\n访问列表的元素只需将该元素的位置或索引告诉python\nlist[0]print(list[-1])#表示最后一个元素\n负数索引返回离列表末尾相对应距离的元素\n修改、添加和删除元素修改列表元素\nlist[0] = &#x27;hei&#x27;\n在列表尾部中添加元素,使用append()函数\nlist.append(&#x27;tom&#x27;)\n\n在列表中插入元素,使用Insert函数\nlist.insert(2,&#x27;ad&#x27;)#在第三位插入ad\n从列表中删除元素1、使用del语句删除\ndel list[0]#删除list第一个元素\n2、使用pop()删除元素pop像出栈\nname = list.pop()#name为list最后一个元素，且list的最后一个元素删除\n3、弹出列表中任何位置处的而元素\nname = list.pop(2)#弹出pop第三个元素赋值给name\n4、根据值删除元素使用remove()函数\nlist.remove(&#x27;tom&#x27;)#删除第一个tom元素\n组织列表使用sort()对列表进行永久排序\nlsit.sort()#和C++sort()一样list.sort(reverse=true)#逆序进行排序\n使用sorted()对列表进行临时排序可以以排好的顺序输出，但是不影响原始排列\nprint(sorted(list))print(list)#list的顺序不受影响\n\n反转列表\nlist.reverse()\n确定列表长度\nlen(list)\n操作列表遍历列表for循环遍历\nfor l in list:\tprint(l)\nfor循环注意缩进，缩进的才循环，没缩进的只执行一遍不要忘记for后边的冒号\n创建数值列表range()函数\nfor value in range(1,5):\tprint(value)#输出1，2，3，4，不会输出5\n\nrange()函数创建数字列表\nnumbers = list(range(1,6)print(numbers)\nrange()也可以指定步长\nnumbers = list(ranges(2,11,2))#2到11之间每次加2\n\nmin()、max()、sum()函数对列表进行统计\nmin(num)#num中最小数max(num)#num中最大数sum(num)#num中所有数和\n\n列表解析\nsquares = [value**2 for value in range(1,11))print(squares)#输出为1,4,9,16,25,36,64,81,100\n这种语法为列表名 = [ value表达式 for value in 值]注意这里for没有冒号\n使用列表的一部分切片，指定第一个元素和最后一个元素\nplayer = [&#x27;tom&#x27;,&#x27;jam&#x27;,&#x27;jom&#x27;,&#x27;iop&#x27;]print(players[0:2]#[&#x27;tom&#x27;,&#x27;jam&#x27;]]\n如果没有指定第一个元素，将从列表开头开始如果没有指定第二个索引，将终止与列表末尾\n遍历切片\nfor l in list[:2]\tprint(l.title())#title()函数返回标题化的字符串，所有单词以大写开始，其余字符均为小写\n复制切片\nname = list[:]#如果采用下面的方式name = list#是将name这关联到list1的列表，两个变量指向同一个列表\n\n元组元组的值不能修改元组使用圆括号定义，可以使用索引访问元素\nlist = (20,30,40)\n虽然元组的元素不能修改，但是储存元组赋值\nlist = (20,30)list = (40,50)\n\nif条件测试\n检查相等时区分大小写!=不相等and 为&amp;&amp;or 为 ||\n\n检查特定值是否在列表中：\nlist = [&#x27;car&#x27;,&#x27;cat&#x27;,dog&#x27;,&#x27;door&#x27;]&#x27;car&#x27; in list#返回值为true\n\n检查特定值不在列表中\nlist = [&#x27;car&#x27;,&#x27;cat&#x27;,dog&#x27;,&#x27;door&#x27;]if &#x27;car&#x27; not in list:  print(&#x27;true&#x27;)\n字典举例alien = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;high&#x27;:10&#125;print(alien[&#x27;color&#x27;]\n使用字典在python中字典是一系列键值对添加键值对\nalien[&#x27;wigth&#x27;]=60alien[&#x27;sex&#x27;]=&#x27;男’\n使用del删除键值对\ndel alien[&#x27;wigth&#x27;]\n\n遍历字典\nfor key,value in list.items():  pritn(&#x27;\\nkey:&#x27; + key)  print(&#x27;value:&#x27; + value)\n方法items()，返回一个键值对列表遍历字典时，键值对的返回顺序与存储顺序不同，python不关心键值对顺序\n使用keys()方法，遍历所有键\nfor name in list.keys():  print(name.title())\n使用values(),遍历所有值\nfor value in list.values():  print(value.title())\n\n嵌套字典字典列表把字典存储到列表中\nalien_0 = &#123;&#x27;heig&#x27;:12&#125;alien_1 = &#123;&#x27;heig&#x27;:11&#125;aliens = [alien_0,alien_1]\n在字典中存储列表\npizza = &#123;\t&#x27;crust&#x27;:&#x27;thick&#x27;,\t&#x27;toppings&#x27;:[&#x27;mushrooms&#x27;,&#x27;extra cheese&#x27;]\t&#125;print(pizza[&#x27;toppings&#x27;][2])\n在字典中存储字典\nusers = &#123;\t&#x27;tam&#x27;:&#123;&#x27;first&#x27;:1,&#x27;seconds&#x27;:2&#125;,\t&#x27;tom&#x27;:&#123;&#x27;first&#x27;:3,&#x27;seconds&#x27;:4&#125;&#125;print(users[&#x27;tom&#x27;]) # 输出为&#123;&#x27;first&#x27;, 3,&#x27;seconds&#x27;:4&#125;print(users[&#x27;tom&#x27;][&#x27;first&#x27;]) #输出为3\n\ninput()的工作原理函数input()让程序暂停，等待用户输入文本，输入后存储在一个变量中但是它返回的是一个字符串，可以使用int()对number进行转换\nmessage = input(&quot;Input a number:&quot;)print(message)message = int(message)\n\n函数def funname():&quot;&quot;&quot;显示Hello&quot;&quot;&quot; #文档字符串的注释\tprint(&quot;Hello&quot;)funname()\n类创建和使用类# 创建一个Dog类class Dog():\t&quot;&quot;&quot;创建一个Dog类&quot;&quot;&quot;\n\n\n","tags":["Python"]},{"title":"TF-IDF原理及Python实现","url":"/TF-IDF%E5%8E%9F%E7%90%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/","content":"定义TF-IDF是一种信息检索与数据挖掘常用的加权技术。TF是词频，IDF是逆文本频率指数。原理：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为这个词或者短语具有很好的类别区分能力。TF-IDF实际上是TF * IDF。TF是词频，IDF逆向文件频率。TF：词条在所在文档出现的频率。tf = n/N。n为该单词出现的次数，N为该文章所有的单词数。例如文章essay为”Tom likes eating hamburger,Jam likes eating banana”,likes的TF则为2/8 = 0.25逆向文件频率IDF：如果包含词条的文档越少，IDF越大。idf = log(D/d + 1) D为所有的文件总数，d为包含该词的文件数目。例如有三个文章：essay1:“张老师喜欢喝茶”essay2:“李老师喜欢钓鱼”essay3:”王老师喜欢听歌“则”喜欢“一词的IDF为log(3/3 + 1)=0,”钓鱼“一次的IDF为log(3/1 +1)=log(4)=0.602\npython 实现TF-IDFimport jiebaimport osimport mathFILEPATH = &quot;D:\\python\\example&quot;#遍历文件夹的所有文件，返回列表arrdef func(filepath):    arr = []    for filepaths,dirnames,filenames in os.walk(filepath):        for fi in filenames:            arr.append(filepaths + &#x27;\\\\&#x27; + fi)    return arrprint(func(FILEPATH));#向文件中写入strdef wry(str,path):    f = open(path,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)    f.write(str)    f.close()    return path#读文件def read(path):    list = []    f = open(path,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;)    values = f.read()       return path#将一篇文章分词，返回一个listdef toword(path):    f = open(path,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;)    value = f.read()    list = jieba.lcut(value)    return list#获取停用词表def getstopword(path):    swlis = []    f = open(path,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;)    words = f.read()        for i in words:                swlis.append(i)        return swlis#去除文章停用词def ridoword(lis,swlis):    afterswlis = []    for i in lis:        if str(i) in swlis:            continue        else:            afterswlis.append(str(i))    return afterswlis#统计词频，并返回字典def freqword(wordlis):    freword = &#123;&#125;    for i in wordlis:        if str(i) in freword:            freword[str(i)] = freword[str(i)] + 1        else:            freword[str(i)] = 1    return freword#建立语料库def corpus(filelist,swlist):    alllist = []    for i in filelist:        afterswlis = ridoword(toword(read(str(i))),swlist)        alllist.append(afterswlis)    return alllist#计算包含该词的文章数def wordfilecount(word,corpuslist):    count = 0    for i in corpuslist:        if word in i:            count = count + 1        else:            continue    return count#计算TF-IDFdef tf_idf(wordlist,filelist,corpuslist):    outdic = &#123;&#125;    tf = 0    idf = 0    dic = freqword(wordlist)    outlis = []    for i in set(wordlist):        tf = dic[str(i)]/len(wordlist)        idf = math.log(len(filelist)/(wordfilecount(str(i),corpuslist) + 1))        tfidf = tf * idf        outdic[str(i)] = tfidf   # print(outdic)    return outdicessaylist = toword(FILEPATH + &#x27;\\essay1.txt&#x27;)stopword = getstopword(FILEPATH + &#x27;\\stopword.txt&#x27;)esslist = ridoword(essaylist,stopword)filelist = func(FILEPATH)corpuslist = corpus(filelist,getstopword(FILEPATH + &#x27;\\stopword.txt&#x27;))print(tf_idf(esslist,filelist,corpuslist))\n","tags":["NLP"]},{"title":"Linux学习","url":"/Linux%E5%AD%A6%E4%B9%A0/","content":"磁盘分区磁盘结构1、磁盘的组成主要有盘片、机械手臂、磁头与主轴达组成，数据写入是在盘片上面。盘片又可细分出扇区、磁道两种单位。[添加磁盘照片]磁盘的第一个扇区特别重要，记录了整个磁盘的重要信息。早期磁盘第一个扇区里面含有的重要信息称为MBR。\nMSDOS(MBR)和GPT磁盘分区表早期为了兼容Windows使用的是支持Windows的MBR(Master Boot Record,主要开机区）\n","tags":["Linux"]}]